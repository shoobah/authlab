{"version":3,"sources":["shared/utils/History.ts","store/Routes.ts","store/RootStore.ts","features/department/DepartmentPage.tsx","features/home/HomePage.tsx","features/NotFoundPage.tsx","shared/utils/generate-url.ts","shared/utils/match-url.ts","App.tsx","shared/utils/history-adapter.ts","serviceWorker.ts","index.tsx"],"names":["history","createBrowserHistory","basename","routes","name","pattern","notFound","RouterState","RootStore","RootStoreClass","Object","classCallCheck","this","routerStore","RouterStore","RootStoreContext","React","createContext","styles","root","padding","DepartmentPage","useContext","params","routerState","react_default","a","createElement","style","id","onClick","goTo","HomePage","console","log","NotFoundPage","generatorCache","generateUrl","arguments","length","undefined","queryParams","url","generator","compiledGenerator","compile","getGenerator","keys","concat","stringify","patternInfoCache","matchUrl","_getPatternInfo","patternInfo","newPatternInfo","regExp","pathToRegexp","getPatternInfo","match","exec","_match","toArray","values","slice","reduce","key","index","HistoryAdapter","_this","goToLocation","location","hash","Promise","resolve","matchingRoute","i","route","pathname","parse","search","goToNotFound","goBack","observeRouterStateChanges","reaction","currentUrl","routerStateUrl","routeName","getRoute","routerStateToUrl","push","listen","App","viewMap","department","DepartmentPage_DepartmentPage","home","HomePage_HomePage","dist","Boolean","window","hostname","configure","enforceActions","runApp","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.79fa4910.chunk.js","sourcesContent":["import { createBrowserHistory } from \"history\";\r\n\r\nexport const history = createBrowserHistory({\r\n  basename: \"TeleoptiWFM/Web/WFM/#/meetingplanner/\"\r\n});\r\n","import { Route } from \"mobx-state-router\";\r\nexport const routes: Route[] = [\r\n  {\r\n    name: \"home\",\r\n    pattern: \"/\"\r\n  },\r\n  {\r\n    name: \"department\",\r\n    pattern: \"/departments/:id\"\r\n  },\r\n  {\r\n    name: \"notFound\",\r\n    pattern: \"/not-found\"\r\n  }\r\n];\r\n","import React from \"react\";\r\nimport { RouterState, RouterStore } from \"mobx-state-router\";\r\nimport { routes } from \"./Routes\";\r\n\r\nconst notFound = new RouterState(\"notFound\");\r\n\r\nexport class RootStoreClass {\r\n  routerStore = new RouterStore(this, routes, notFound);\r\n}\r\n\r\nexport const RootStore = new RootStoreClass();\r\nexport const RootStoreContext = React.createContext(RootStore);\r\n","import React from \"react\";\r\nimport { RootStoreContext } from \"../../store/RootStore\";\r\n\r\nconst styles = {\r\n  root: {\r\n      padding: 16\r\n  }\r\n};\r\n\r\nexport const DepartmentPage: React.FC = () => {\r\n  const { routerStore } = React.useContext(RootStoreContext);\r\n  const { params } = routerStore.routerState;\r\n\r\n  const handleClick = () => {\r\n    routerStore.goTo('home');\r\n  };\r\n\r\n  return ( \r\n    <div style={styles.root}>\r\n      <h1>Welcome to {params.id}</h1>\r\n      <button onClick={handleClick}>Go Home!</button>\r\n    </div>);\r\n    \r\n}\r\n","import React from \"react\";\r\nimport \"./HomePage.css\";\r\nimport { RootStoreContext } from \"../../store/RootStore\";\r\n\r\nconst styles = {\r\n  root: {\r\n      padding: 16\r\n  }\r\n};\r\n\r\nexport const HomePage: React.FC = () => {\r\n  console.log(\"Home\");\r\n  const { routerStore } = React.useContext(RootStoreContext);\r\n\r\n  const handleClick = () => {\r\n    routerStore.goTo('department', { id: 'electronics' });\r\n  };\r\n\r\n  return ( \r\n    <div style={styles.root}>\r\n    <h1>Home</h1>\r\n    <button onClick={handleClick}>\r\n        Go to Electronics\r\n    </button>\r\n</div>);\r\n}","import React from 'react';\r\nimport { RootStoreContext } from \"../store/RootStore\";\r\n\r\nconst styles = {\r\n    root: {\r\n        padding: 16\r\n    }\r\n};\r\n\r\nexport function NotFoundPage() {\r\n    const { routerStore } = React.useContext(RootStoreContext);\r\n\r\n    const handleClick = () => {\r\n        routerStore.goTo('home');\r\n      };\r\n    \r\n    return (\r\n        <div style={styles.root}>\r\n            <h1>Page Not Found</h1>\r\n            <button onClick={handleClick}>Go Home!</button>\r\n        </div>\r\n    );\r\n}","import { compile, PathFunction } from \"path-to-regexp\";\nimport { stringify } from \"query-string\";\nimport { RouterState, RouterStore } from \"mobx-state-router\";\n\ninterface GeneratorCache {\n  [pattern: string]: PathFunction;\n}\n\nconst generatorCache: GeneratorCache = {};\n\nconst getGenerator = (pattern: string): PathFunction => {\n  const generator = generatorCache[pattern];\n  if (generator) {\n    return generator;\n  }\n\n  const compiledGenerator = compile(pattern);\n  generatorCache[pattern] = compiledGenerator;\n\n  return compiledGenerator;\n};\n\n/**\n * Generates a URL from a pattern and parameters.\n * For example,\n *     generateUrl('/departments/:id', { id: 'electronics' })\n *     => '/departments/electronics'\n */\nexport const generateUrl = (pattern = \"/\", params = {}, queryParams = {}) => {\n  // inject params\n  const generator = getGenerator(pattern);\n  let url = generator(params);\n\n  // inject queryParams (remember to insert the question mark)\n  if (Object.keys(queryParams).length > 0) {\n    url = `${url}?${stringify(queryParams)}`;\n  }\n\n  return url;\n};\n\n/**\n * Converts the supplied routerState to a URL\n * @param {RouterStore} routerStore\n * @param {RouterState} routerState\n * @returns {string}\n */\nexport const routerStateToUrl = (\n  routerStore: RouterStore,\n  routerState: RouterState\n): string => {\n  const { routeName, params, queryParams } = routerState;\n  const route = routerStore.getRoute(routeName);\n  return generateUrl(route.pattern, params, queryParams);\n};\n","import pathToRegexp from \"path-to-regexp\";\nimport { StringMap } from \"mobx-state-router\";\n\ninterface PatternInfo {\n  regExp: RegExp;\n  keys: pathToRegexp.Key[];\n}\n\ninterface PatternInfoCache {\n  [pattern: string]: PatternInfo;\n}\n\nconst patternInfoCache: PatternInfoCache = {};\n\nconst getPatternInfo = (pattern: string): PatternInfo => {\n  const patternInfo = patternInfoCache[pattern];\n  if (patternInfo) {\n    return patternInfo;\n  }\n\n  const keys: pathToRegexp.Key[] = [];\n  const regExp = pathToRegexp(pattern, keys);\n  const newPatternInfo = { regExp, keys };\n  patternInfoCache[pattern] = newPatternInfo;\n\n  return newPatternInfo;\n};\n\n/**\n * Matches a URL to a pattern.\n * For example,\n *     matchUrl('/departments/electronics', '/departments/:id'\n *     => { id: 'electronics' }\n */\nexport const matchUrl = (url: string, pattern: string) => {\n  const { regExp, keys } = getPatternInfo(pattern);\n  const match = regExp.exec(url);\n  if (!match) {\n    return undefined;\n  }\n\n  // tslint:disable-next-line:no-unused-variable\n  const [matchedUrl, ...values] = match;\n\n  return keys.reduce((params: StringMap, key, index) => {\n    params[key.name] = values[index];\n    return params;\n  }, {});\n};\n","import React from 'react';\nimport { RouterView, ViewMap } from \"mobx-state-router\";\nimport { history } from './shared/utils/History';\nimport { RootStore } from './store/RootStore';\nimport { RootStoreContext } from \"./store/RootStore\";\nimport { DepartmentPage } from './features/department/DepartmentPage';\nimport { HomePage } from './features/home/HomePage';\nimport { NotFoundPage } from './features/NotFoundPage';\nimport { HistoryAdapter } from './shared/utils/history-adapter';\nimport './App.css';\n\nconst historyAdapter = new HistoryAdapter(RootStore.routerStore, history);\nhistoryAdapter.observeRouterStateChanges();\n\nconst App: React.FC = () => {\n  const { routerStore } = React.useContext(RootStoreContext);\n\n  const viewMap : ViewMap = {\n    department: <DepartmentPage />,\n    home: <HomePage />,\n    notFound: <NotFoundPage />\n  };\n  \n  return (\n    <RouterView routerStore={routerStore} viewMap={viewMap} />\n  );\n}\n\nexport default App;\n","import { History, Location } from \"history\";\nimport { reaction } from \"mobx\";\nimport { parse } from \"query-string\";\nimport { RouterState, RouterStore } from \"mobx-state-router\";\nimport { routerStateToUrl } from \"./generate-url\";\nimport { matchUrl } from \"./match-url\";\n\n/**\n * Responsible for keeping the browser address bar and the `RouterState`\n * in sync. It also provides a `goBack()` method to go back in history.\n */\nexport class HistoryAdapter {\n  routerStore: RouterStore;\n  history: History;\n\n  constructor(routerStore: RouterStore, history: History) {\n    this.routerStore = routerStore;\n    this.history = history;\n\n    // Go to current history location\n    // tslint:disable-next-line:no-floating-promises\n    this.goToLocation(this.history.location);\n\n    // Listen for history changes\n    this.history.listen(location => this.goToLocation(location));\n  }\n\n  goToLocation = (location: Location): Promise<RouterState> => {\n    // if (process.env.NODE_ENV === 'development') {\n    //     console.log(\n    //         `HistoryAdapter.goToLocation(${JSON.stringify(location)})`\n    //     );\n    // }\n\n    console.log(\"location: \", location);\n\n    if (location.hash.length > 0) {\n      return Promise.resolve(this.routerStore.routerState);\n    }\n\n    // Find the matching route\n    const routes = this.routerStore.routes;\n    let matchingRoute = null;\n    let params = undefined;\n    for (let i = 0; i < routes.length; i++) {\n      const route = routes[i];\n      params = matchUrl(location.pathname, route.pattern);\n      if (params) {\n        matchingRoute = route;\n        break;\n      }\n    }\n\n    if (matchingRoute) {\n      return this.routerStore.goTo(\n        new RouterState(matchingRoute.name, params, parse(location.search))\n      );\n    } else {\n      return this.routerStore.goToNotFound();\n    }\n  };\n\n  goBack = () => {\n    this.history.goBack();\n  };\n\n  observeRouterStateChanges = () => {\n    reaction(\n      () => this.routerStore.routerState,\n      (routerState: RouterState) => {\n        const location = this.history.location;\n        const currentUrl = `${location.pathname}${location.search}`;\n        const routerStateUrl = routerStateToUrl(this.routerStore, routerState);\n        if (currentUrl !== routerStateUrl) {\n          this.history.push(routerStateUrl);\n          // if (process.env.NODE_ENV === 'development') {\n          //     console.log(\n          //         `HistoryAdapter: history.push(${routerStateUrl}),`,\n          //         `history.length=${this.history.length}`\n          //     );\n          // }\n        }\n      }\n    );\n  };\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { configure } from 'mobx';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconfigure({ enforceActions: 'observed' });\n\ndeclare global {\n    interface Window { runApp: any; }\n}\n\nwindow.runApp = () => {\n    ReactDOM.render(<App />, document.getElementById('root'));\n\n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: https://bit.ly/CRA-PWA\n    serviceWorker.unregister();\n}\n\nwindow.runApp();"],"sourceRoot":""}